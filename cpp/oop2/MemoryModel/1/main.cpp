//代码区：存放所有的代码和注释，由操作系统进行管理（存放的是二进制数据）
//全局区：存放全局变量，静态变量和常量
//栈区：由编译器自动管理，存放函数的局部变量，参数值等
//堆区：由程序员自己管理，若没有释放，程序结束后由操作系统自动释放。（new出来的就是堆区的内存）



//程序运行前：
//程序经过编译后，会生成可执行文件（二进制的形式），未执行该程序前共分为两个区域：
//代码区：存放CPU执行的机器指令，由操作系统进行管理（存放的是二进制数据）
//代码区数据是共享的，在内存中只存一份，可以多次被执行
//代码区是只读的，防止被意外修改
//全局区：存放全局变量，静态变量和常量



#include<iostream>
using namespace std;
void test(){
    static int d = 10;
    d++;
    cout << d << '\n';
    cout << "静态变量d的地址为：" << &d << '\n';
}

int g_a = 10;
int g_b = 10;//定义在函数外的变量是全局变量，全局变量储存在全局区
const int g_c = 10;
int main(){
    int a = 10;
    int b = 10;//定义在函数内部的变量是局部变量，局部变量储存在栈区
    static int c = 10;//静态变量储存在全局区
                      //静态变量在程序运行前会分配内存，在程序结束后会释放内存，其生命周期是直到程序运行结束，但是其作用域是局部的
                      //如果想要保存数据到下一次使用，一般使用静态变量而不是全局变量
    const int d = 10;
    cout << "局部变量a的地址为：" << &a << endl;
    cout << "局部变量b的地址为：" << &b << endl;
    cout << "局部常量d的地址为：" << &d << endl;//这三个是一起放在栈区里的
    cout << "全局变量g_a的地址为：" << &g_a << endl;
    cout << "全局变量g_b的地址为：" << &g_b << endl;
    cout << "静态变量c的地址为：" << &c << endl;
    //cout << d;  报错，d的作用域只在test函数里面
    test();
    test();//其声明周期是直到程序结束，函数结束时不会销毁
           //延长数据的生命周期，同时不破坏数据的访问范围
    cout << "字符串常量的地址为：" << &"hello world" << endl;
    cout << "全局常量的地址为：" << &g_c << '\n'; 
  


}